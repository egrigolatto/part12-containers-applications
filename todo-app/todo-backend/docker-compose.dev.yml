services:
  # Contenedor del backend
  app:
    build:
      context: .  # Ajusta la ruta si tu Dockerfile está en esa carpeta
      dockerfile: dev.Dockerfile
    image: backend-dev
    container_name: backend-dev
    ports:
      - "3000:3000"  # Mapea el puerto del contenedor (backend) al puerto 3000 de tu máquina
    volumes:
      - .:/usr/src/app  # Monta la carpeta del proyecto al contenedor
      - /usr/src/app/node_modules  # Ignora los node_modules en el host
    environment:
      MONGO_URI: "mongodb://root:example@mongo:27017/the_database"
      REDIS_URI: "redis://redis:6379"
    depends_on:
      - mongo
      - redis
    networks:
      - todo-net  # Asegura que el backend esté en la misma red que Nginx

  # Contenedor de MongoDB
  mongo:
    image: mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: the_database
    volumes:
      - ./mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
      - ./mongo_data:/data/db
    networks:
      - todo-net  # Asegura que MongoDB esté en la misma red

  # Contenedor de Redis
  redis:
    image: redis
    ports:
      - "6379:6379"
    command: ['redis-server', '--appendonly', 'yes']  # Activar persistencia AOF
    volumes:
      - ./redis_data:/data
    networks:
      - todo-net  # Asegura que Redis esté en la misma red

  # Contenedor de Nginx (proxy inverso)
  nginx:
    image: nginx:1.20.1
    volumes:
      - ./nginx.dev.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8081:80"  # Exponemos el puerto 8081 para acceder al proxy inverso
    container_name: reverse-proxy-backend
    depends_on:
      - app  # Asegurarse de que el backend (app) esté disponible
      - mongo  # Mongo debe estar listo para que el backend funcione correctamente
      - redis  # Redis debe estar listo también
    networks:
      - todo-net  # Nginx debe estar en la misma red para poder acceder a los otros servicios

networks:
  todo-net:
    driver: bridge  # Crea una red personalizada para permitir la comunicación entre contenedores
